name: infra-default_infra_12345 Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize
      - closed
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_cf51ff61-c279-4ab4-a71b-54601905a03f
env:
  ENCODED_PIPELINE_SECRET: ${{secrets.TESTSERVICE2_INFRADEFAULT_INFRA_12345}}
  COMMIT_ID: ${{github.event.client_payload.commitId || github.sha || github.run_id}}
jobs:
  _status-pending:
    name: _status Pending
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Started
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq -c . | base64)
              response=$(curl -X PUT -d "runId=${{ github.run_id }}&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/PENDING?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
  apply:
    name: Apply
    defaults:
      run:
        working-directory: infrastructure/vccccccx
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - _status-pending
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Launch Template Starts Status [LAUNCH_TEMPLATE] [STARTED]
        run: >-
          curl --location --request POST
          'https://api.skyu.io/infrastructure-service/infrastructure/infra_75fc26c5-26dc-4546-bd51-040ddf42d91b?stepName=Launch-Template&status=Started'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::985504043303:role/SkyU-EKS-DEV-eks
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Download Terragrunt
        run: >-
          wget
          https://github.com/gruntwork-io/terragrunt/releases/download/v0.50.6/terragrunt_linux_amd64
          && mv terragrunt_linux_amd64 terragrunt && chmod u+x terragrunt && mv
          terragrunt /usr/local/bin/terragrunt
      - name: Terragrunt Version Check
        run: terragrunt version
      - name: Push Terragrunt Status [INIT] [IN_PROGRESS]
        run: >-
          curl --location --request POST
          'https://api.skyu.io/infrastructure-service/infrastructure/infra_75fc26c5-26dc-4546-bd51-040ddf42d91b?stepName=Launch-Template&status=Started'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Terragrunt Init
        run: terragrunt init --terragrunt-non-interactive
      - name: Push Terragrunt Status [INIT] [FAILED]
        if: failure()
        run: >-
          curl --location --request POST
          'https://api.skyu.io/infrastructure-service/infrastructure/infra_75fc26c5-26dc-4546-bd51-040ddf42d91b?stepName=Terragrunt-Init&status=Failed'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Push Terragrunt Status [INIT] [SUCCESS]
        run: >-
          curl --location --request POST
          'https://api.skyu.io/infrastructure-service/infrastructure/infra_75fc26c5-26dc-4546-bd51-040ddf42d91b?stepName=Terragrunt-Init&status=Success'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: '[SLEEP]'
        run: sleep 3
      - name: Push Terragrunt Status [PLAN] [IN_PROGRESS]
        run: >-
          curl --location --request POST
          'https://api.skyu.io/infrastructure-service/infrastructure/infra_75fc26c5-26dc-4546-bd51-040ddf42d91b?stepName=Terragrunt-Plan&status=InProgress'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Terragrunt Plan
        run: terragrunt plan --terragrunt-non-interactive
      - name: Push Terragrunt Status [PLAN] [FAILED]
        if: failure()
        run: >-
          curl --location --request POST
          'https://api.skyu.io/infrastructure-service/infrastructure/infra_75fc26c5-26dc-4546-bd51-040ddf42d91b?stepName=Terragrunt-Plan&status=Failed'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Push Terragrunt Status [PLAN] [SUCCESS]
        run: >-
          curl --location --request POST
          'https://api.skyu.io/infrastructure-service/infrastructure/infra_75fc26c5-26dc-4546-bd51-040ddf42d91b?stepName=Terragrunt-Plan&status=Success'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: '[SLEEP]'
        run: sleep 3
      - name: Push Terragrunt Status [APPLY] [IN_PROGRESS]
        run: >-
          curl --location --request POST
          'https://api.skyu.io/infrastructure-service/infrastructure/infra_75fc26c5-26dc-4546-bd51-040ddf42d91b?stepName=Terragrunt-Apply&status=InProgress'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Terragrunt Apply
        run: terragrunt apply --terragrunt-non-interactive -auto-approve
      - name: Push Terragrunt Status [APPLY] [FAILED]
        if: failure()
        run: >-
          curl --location --request POST
          'https://api.skyu.io/infrastructure-service/infrastructure/infra_75fc26c5-26dc-4546-bd51-040ddf42d91b?stepName=Terragrunt-Apply&status=Failed'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Push Terragrunt Status [APPLY] [SUCCESS]
        run: >-
          curl --location --request POST
          'https://api.skyu.io/infrastructure-service/infrastructure/infra_75fc26c5-26dc-4546-bd51-040ddf42d91b?stepName=Terragrunt-Apply&status=Success'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": $(terragrunt
          output --json)}'
  _status-success:
    name: _status Success
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    needs:
      - apply
    if: ${{ !(failure() || cancelled()) }}
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Success
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq -c . | base64)
              response=$(curl -X PUT -d "runId=${{ github.run_id }}&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/SUCCESS?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              
  _status-failed:
    name: _status Failed
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    needs:
      - apply
    if: ${{ failure() || cancelled() }}
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Failed
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq -c . | base64)
              response=$(curl -X PUT -d "runId=${{ github.run_id }}&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/FAILED?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              
