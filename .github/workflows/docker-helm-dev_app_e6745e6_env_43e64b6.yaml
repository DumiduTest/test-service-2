name: docker-helm-dev_app_e6745e6_env_43e64b6 Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - master
    tags:
      - v*
    paths-ignore:
      - .github/workflows/**
      - .trivyignore
      - Readme.md
      - README.md
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_c6020c63-08c7-454e-9ab2-6eb8da0a8348
env:
  ENCODED_PIPELINE_SECRET: ${{secrets.TESTSERVICE2_DOCKERHELMDEV_APP_E6745E6_ENV_43E64B6}}
  COMMIT_ID: ${{github.event.client_payload.commitId || github.sha || github.run_id}}
  BRANCH_NAME: ${{github.event.client_payload.branchName || github.event.branch}}
  RULES_ENV_VARS: '[{\"ruleKey\":\"imageTag\",\"ruleValue\":\"$COMMIT_ID\"}]'
  DEPLOY_STEP_SHOULD_DEPLOY: 'true'
jobs:
  undefined: {}
  build-and-push.outputs:
    name: Build And Push.outputs
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    needs:
      - build-and-push
      - trigger-helm-pipelines
      - deploy
    if: ${{ failure() || cancelled() }}
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Failed
        env:
          RUN_ID: ${{ github.run_id }}
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq -c . | base64)
              response=$(curl -X PUT -d "runId=$RUN_ID&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/FAILED?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              
    outputs:
      stepsCanProceed: ${{ env.STEPS_CAN_PROCEED }}
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      name: build-and-push.outputs
      needs:
        - build-and-push
        - _status_testing
      steps:
        - name: TRIGGER_HELM_PIPELINES
          config:
            envVars: []
            helmAppId: test
            rulesEnvVars:
              - ruleKey: imageTag
                ruleValue: $COMMIT_ID
            usePrevDockerBuild: false
          metaData:
            envVars:
              tags: []
              isEditable: true
            helmAppId:
              tags:
                - STRING
              isEditable: true
            rulesEnvVars:
              tags:
                - ARRAY
                - OBJECT
              isEditable: true
            usePrevDockerBuild:
              tags: []
              isEditable: false
      outputs:
        stepsCanProceed: ${{ env.STEPS_CAN_PROCEED }}
    if: >-
      needs.build-and-push.outputs.stepsCanProceed == 'true' &&
      github.event.client_payload.releaseData == null
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Deploy and Notify Resource Service'
        env:
          RUN_ID: ${{ github.run_id }}
          SHA: ${{ github.sha }}
          COMMIT_USER: ${{ github.event.head_commit.author.name }}
          COMMIT_TIME: ${{ github.event.head_commit.timestamp }}
          COMMIT_MESSAGE: >-
            ${{ github.event.head_commit.message ||
            github.event.client_payload.commitMessage }}
        run: |2-
              
              response=$(curl -X PATCH -d "imageRegistryURL=${{ env.IMAGE_NAME }}&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.COMMIT_ID }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=$RUN_ID&commitDetails[commitHash]=$SHA&commitDetails[commitAvatar]=https://github.com/$COMMIT_USER.png&commitDetails[commitTime]=$COMMIT_TIME&commitDetails[commitMessage]=$COMMIT_MESSAGE&commitDetails[commitUser]=$COMMIT_USER"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.DEPLOYMENT_ENDPOINT }}")
              
              status_code=$?

              if [ $status_code -eq 0 ]; then
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                  exit 1
                fi
              else
                echo "Failed to deploy. HTTP status code: $status_code"
                exit 1
              fi
            
