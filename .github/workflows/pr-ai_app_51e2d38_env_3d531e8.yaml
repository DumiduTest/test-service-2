name: pr-ai_app_51e2d38_env_3d531e8 Pipeline (Skyu Generated)
'on':
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_1694ffef-5c22-4634-838c-d3ab71b8ac4b
env:
  ENCODED_PIPELINE_SECRET: ${{secrets.TESTSERVICE2_PRAI_APP_51E2D38_ENV_3D531E8}}
  COMMIT_ID: ${{github.event.client_payload.commitId || github.sha || github.run_id}}
jobs:
  _status-pending:
    name: _status Pending
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Started
        run: |2-

                response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/PENDING')

                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                fi
              
  fix-code-with-ai:
    name: Fix Code With AI
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - id: check-logs
        env:
          LOGS: ${{ github.event.client_payload.logs }}
        run: |2-

                  if ${{ env.LOGS != null }}; then
                    echo "Logs found..."
                    echo "Logs: ${{ env.LOGS }}"
                  else 
                    echo "Logs Not found to run the AI pipeline"
                    exit 1
                  fi
                
        name: 'Run :: Check Logs'
      - run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
        name: 'Run :: Decoding Secrets 835f2e'
      - name: 'Run :: Checkout repository for AI Fixes'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: get-file-paths
        run: |2-

                  files="$(git ls-files -z | tr '\0' ,)"
                  echo "file-paths=$files" >> $GITHUB_OUTPUT
                
        name: 'Run :: Get file paths'
      - id: send-logs
        env:
          LOGS: ${{ github.event.client_payload.logs }}
          FILE_PATHS: ${{ steps.get-file-paths.outputs.file-paths }}
        run: |2-

                  payload=$(jq -n --arg logs "${{ env.LOGS }} | @sh" --arg file_paths "$FILE_PATHS" '{"error_message": $logs, "available_files": $file_paths}')
                  echo "payload: $payload"

                  response=$(curl -X POST -d "$payload"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-auth-by: sa' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'Content-Type: application/json'  '${{ env.AI_SUGGESTED_SOLUTION_EP }}/identify-files/')

                  status_code=$?
                  if [ $status_code -eq 0 ]; then
                    echo "SUCCESS :: $response"
                    identifiedFiles=$(echo "$response" | jq -r '.identified_files')
                  echo "identified-files=$identifiedFiles" >> $GITHUB_OUTPUT
                  else
                    echo "FAILED :: $response"
                    exit 1
                  fi
                  
        name: 'Run :: Send logs to AI service'
      - run: git checkout -b fix-issue-${{ github.run_id }}
        name: 'Run :: Create new branch'
      - id: send-file
        env:
          LOGS: ${{ github.event.client_payload.logs }}
          FILE_NAME: ${{ steps.send-logs.outputs.identified-files }}
          FILE_PATH: ${{ steps.send-logs.outputs.identified-files }}
        run: |2-

                  file_content=$(cat "$FILE_PATH")
                  payload=$(jq -n --arg fileName "$FILE_NAME" --arg fileContent "$file_content" --arg logs "${{ env.LOGS }} | @sh" '{"file_contents": {($fileName): $fileContent}, "error_message": $logs}')
                  echo "payload: $payload"

                  response=$(curl -X POST -d "$payload"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-auth-by: sa' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'Content-Type: application/json'  '${{ env.AI_SUGGESTED_SOLUTION_EP }}/correct-errors/')

                  status_code=$?
                  if [ $status_code -eq 0 ]; then
                    echo "SUCCESS :: $response"
                    correction_files=$(echo "${response}" | jq -r '.corrected_files')

                    # Loop through the JSON object
                    echo "${correction_files}" | jq -r 'to_entries[] | @base64' | while read -r line; do
                        # Decode the base64 to get the original JSON string
                        decoded=$(echo "${line}" | base64 --decode)
                        # Extract the key (filename) and value (file content) using jq
                        key=$(echo "${decoded}" | jq -r '.key')
                        value=$(echo "${decoded}" | jq -r '.value')
                        # Use the key as the filename and the value as the content, writing to the file
                        echo "${value}" > "${key}"
                        echo "Written to ${key}"
                    done
                  
                    echo "All files have been created."
                    echo "identified-files=$identifiedFiles" >> $GITHUB_OUTPUT
                  else
                    echo "FAILED :: $response"
                    exit 1
                  fi
                
        name: 'Run :: Send file to AI Service'
      - run: |2-

                  git config --global user.email "actions@github.com"
                  git config --global user.name "GitHub Actions"
                  git add .
                  git commit -m "fix issue"
                
        name: 'Run :: Commit changes'
      - run: git push origin fix-issue-${{ github.run_id }}
        name: 'Run :: Push changes'
      - name: 'Run :: Create Pull Request'
        uses: repo-sync/pull-request@v2
        with:
          pr_body: This pull request fixes the error contained in the logs.
          pr_title: Fix Issue-${{ github.run_id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          source_branch: fix-issue-${{ github.run_id }}
          destination_branch: main
  _status-success:
    name: _status Success
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - fix-code-with-ai
    if: ${{ !(failure() || cancelled()) }}
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Success
        run: |2-

              response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/SUCCESS')
              
  _status-failed:
    name: _status Failed
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - fix-code-with-ai
    if: ${{ failure() || cancelled() }}
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Failed
        run: |2-

              response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/FAILED')
              
