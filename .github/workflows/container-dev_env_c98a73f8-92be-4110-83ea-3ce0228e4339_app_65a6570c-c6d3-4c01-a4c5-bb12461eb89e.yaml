name: >-
  container-dev_env_c98a73f8-92be-4110-83ea-3ce0228e4339_app_65a6570c-c6d3-4c01-a4c5-bb12461eb89e
  Pipeline (Skyu Generated) (Skyu Generated)
'on':
  push:
    branches:
      - master
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_4eb3d2fd-0097-4497-9945-c473dc26ed30
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.TESTSERVICE2_ENV_C98A73F892BE411083EA3CE0228E4339_APP_65A6570CC6D34C01A4C5BB12461EB89E_CONTAINERDEV_ENV_C98A73F892BE411083EA3CE0228E4339_APP_65A6570CC6D34C01A4C5BB12461EB89E}}
  IMAGE_NAME: iwiick-img:latest
  IMAGE_NAME_TO_PUSH: iwiick-img.latest
  DOCKER_FILE_NAME: Dockerfile
  REPOSITORY_NAME: iwiick
  SCAN_SEVERITY: CRITICAL
  TRIVY_SCAN_EXIT_CODE: '1'
jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Start
        run: echo " Starting GitHub Action!"
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v2
      - name: 'Run :: Decoding Secrets'
        run: >-
          echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r
          'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo
          "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
      - name: 'Run :: Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Login to Amazon ECR'
        id: skyu-login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: 'Run :: Check if image already exists in AWS Ecr'
        id: check-image-exists-in-aws-ecr
        run: |2-

              set -e   
              IMAGE_EXISTS_IN_ECR=$(aws ecr describe-images --repository-name "${{ env.REPOSITORY_NAME }}" --image-ids imageTag="${{ env.IMAGE_NAME_TO_PUSH }}" --output json)
              
              echo "AWS CLI Output:"
              echo "IMAGE_EXISTS_IN_ECR"
              
              if echo "IMAGE_EXISTS_IN_ECR" | jq -e '.imageDetails' > /dev/null; then
                echo "Image exists in registry."
                echo "IMAGE_EXISTS_IN_ECR=true" >> $GITHUB_ENV
              else
                echo "Image does not exist in registry."
                echo "IMAGE_EXISTS_IN_ECR=false" >> $GITHUB_ENV
              fi
              
      - name: 'Run :: Build With Docker'
        run: >-
          docker images && docker build -t ${{ env.IMAGE_NAME }} -f
          ${{env.DOCKER_FILE_NAME}} .${{env.DOCKER_FILE_PATH}} && docker images
      - name: 'Run :: Create Repository'
        run: >-
          aws ecr create-repository --repository-name ${{ env.REPOSITORY_NAME }}
          || true
      - name: 'Run :: Build, tag, and push image to Amazon ECR'
        run: >-
          docker build -t ${{ steps.skyu-login-ecr.outputs.registry
          }}/${{env.REPOSITORY_NAME}}:${{ env.IMAGE_NAME_TO_PUSH }} . && docker
          push ${{ steps.skyu-login-ecr.outputs.registry
          }}/${{env.REPOSITORY_NAME}}:${{ env.IMAGE_NAME_TO_PUSH }}
      - name: 'Run :: Trivy vulnerability scanner'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: table
          output: trivy-results.json
          exit-code: ${{env.TRIVY_SCAN_EXIT_CODE}}
          ignore-unfixed: true
          vuln-type: os,library
          severity: ${{env.SCAN_SEVERITY}}
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-

              response=$(curl -d "imageRegistryURL=${{ steps.skyu-login-ecr.outputs.registry }}&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.IMAGE_NAME_TO_PUSH }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&commitDetails[commitHash]=${{ github.event.after }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=\"${{ github.event.head_commit.message }}\"&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}" -X PATCH -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.DEPLOYMENT_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' 'https://api.dev.skyu.io/resource-service/applications/deploy')

              status_code=$?

              if [ $status_code -eq 0 ]; then
                if echo "$response" | grep -q '"message":"Unauthorized"'; then
                  echo "FAILED :: Unauthorized access."
                  exit 1
                else
                  echo "SUCCESS :: Response: $response"
                fi
              else
                echo "Failed to deploy. HTTP status code: $status_code"
                exit 1
              fi
            
